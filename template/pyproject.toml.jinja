[project]
name = "{{ package_name }}"
description = "{{ project_description }}"
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"}
]
license = {text = "{{ project_license.short }}"}
readme = "README.md"
dynamic = ["version"]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  {%- for version in python_version.versions %}
  "Programming Language :: Python :: {{ version }}",
  {%- endfor %}
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]
keywords = []

requires-python = ">={{ python_version.versions[0] }}"
dependencies = []

[project.urls]
Repository = "https://github.com/{{ repository_namespace }}/{{ project_slug }}"
Issues = "https://github.com/{{ repository_namespace }}/{{ project_slug }}/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm.version]
source = "scm"

[tool.pdm.dev-dependencies]
lint = [
    "black",
    "ruff",
]
typecheck = [
    "mypy",
]
type_stubs = []
test = [
    "pytest",
    "pytest-cov",
    "pytest-xdist",
    "pytest-pretty",
    "pytest-github-actions-annotate-failures",
]
jupyter = [
    "jupyter",
    "notebook",
]

[tool.black]
target-version = ["{{ python_version.black_target_versions | join('", "') }}"]
include = '\.pyi?$'

[tool.ruff]
line-length = 88
select = [
    "B",
    "D",
    "E",
    "F",
    "I",
    "S",
    "W",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "C90",
    "FBT",
    "C4",
    "DTZ",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "TID",
    "ERA",
    "PLE",
    "RUF",
]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107", "S603"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
"__init__.py" = ["F401"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
disallow_any_unimported = true
disallow_untyped_defs = true
disallow_untyped_calls = true
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = "tests"
addopts = [
    "--strict-markers",
    "--strict-config"
]
xfail_strict = true
markers = [
    "integration:integration tests",
    "e2e:e2e tests"
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 50
exclude_lines = [
    "@overload",
    "if TYPE_CHECKING:",
    "pragma: no cover"
]
